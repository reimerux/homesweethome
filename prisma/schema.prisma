// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Meta

model User {
  id           Int                  @id @default(autoincrement())
  email        String               @unique
  firstName    String?
  lastName     String
  followers    Int                  @default(0)
  isActive     Boolean              @default(true)
  password     String               @default("password")
  registeredAt DateTime             @default(now())
  TaskHistory  taskHistory[]
  role         Role                 @default(VIEWER)
  achievements AchievementOnUsers[]
}

model Achievement {
  achievementId Int                  @id @default(autoincrement())
  category      AchievementCategory
  name          String
  description   String?
  target        Int                  @default(0)
  pointsValue   Int?
  users         AchievementOnUsers[]
}

// Admin

model House {
  houseId       Int    @id
  street        String
  city          String
  squarefootage Int?
  Rooms         Room[]
}

model Room {
  roomId    Int             @id @default(autoincrement())
  name      String
  shortName String          @default("Short")
  notes     String?
  House     House           @relation(fields: [houseId], references: [houseId])
  houseId   Int
  tasks     RoomsOnTasks[]
  issues    RoomsOnIssues[]
}

model MaintenanceTask {
  taskId       Int            @id @default(autoincrement())
  taskName     String
  description  String?        @db.Text
  timeEstimate Int?
  frequency    Frequency      @default(YEARLY)
  importance   Importance     @default(MEDIUM)
  taskSchedule taskSchedule[]
  taskHistory  taskHistory[]
  rooms        RoomsOnTasks[]
  season       Season?
}

// Transactional

model taskSchedule {
  scheduleId        Int             @id @default(autoincrement())
  task              MaintenanceTask @relation(fields: [taskId], references: [taskId])
  taskId            Int
  nextDueDate       DateTime
  lastCompletedDate DateTime?
  status            Status          @default(PENDING)
  notes             String?         @db.Text
}

model taskHistory {
  historyId       Int             @id @default(autoincrement())
  task            MaintenanceTask @relation(fields: [taskId], references: [taskId])
  taskId          Int
  datePerformed   DateTime        @default(now())
  monthPerformed  Int             @default(8)
  yearPerformed   Int             @default(2024)
  status          Status          @default(COMPLETED)
  User            User            @relation(fields: [userPerformedId], references: [id])
  userPerformedId Int             @default(1)
  notes           String?         @db.Text
}

model RoomsOnTasks {
  task       MaintenanceTask @relation(fields: [taskId], references: [taskId])
  taskId     Int // relation scalar field (used in the `@relation` attribute above)
  room       Room            @relation(fields: [roomId], references: [roomId])
  roomId     Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime        @default(now())
  assignedBy String

  @@id([taskId, roomId])
}

model Issue {
  issueId     Int              @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now())
  completedAt DateTime?
  createdBy   Int?
  completedBy Int?
  notes       String?
  status      Status
  priority    Importance
  labels      LabelsonIssues[]
  rooms       RoomsOnIssues[]
}

model Label {
  labelId Int              @id @default(autoincrement())
  name    String
  labels  LabelsonIssues[]
}

model LabelsonIssues {
  issue      Issue    @relation(fields: [issueId], references: [issueId])
  issueId    Int // relation scalar field (used in the `@relation` attribute above)
  label      Label    @relation(fields: [labelId], references: [labelId])
  labelId    Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([issueId, labelId])
}

model RoomsOnIssues {
  issue      Issue    @relation(fields: [issueId], references: [issueId])
  issueId    Int // relation scalar field (used in the `@relation` attribute above)
  room       Room     @relation(fields: [roomId], references: [roomId])
  roomId     Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([issueId, roomId])
}

model AchievementOnUsers {
  achievement   Achievement @relation(fields: [achievementId], references: [achievementId])
  achievementId Int
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  unlockedAt    DateTime

  @@id([achievementId, userId])
}

// Enums

enum Status {
  PENDING
  COMPLETED
  SKIPPED
  CANCELLED
}

enum Frequency {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  ADHOC
}

enum Importance {
  HIGH
  MEDIUM
  LOW
}

enum Season {
  NONE
  WINTER
  SPRING
  SUMMER
  FALL
}

enum Role {
  ADMIN
  VIEWER
  EDIT
}

enum AchievementCategory {
  STREAK
  ISSUES
}
